@using System.Security.Claims
@using BusinessLogicLayer.Services.Interfaces
@model DataAccessLayer.ViewModels.PaginationViewModel<DataAccessLayer.ViewModels.ItemViewModel>

<input type="hidden" id="totalRecords" value="@Model.TotalCount" />

@foreach (var item in Model.Items)
{
    <div class="col-12 col-md-4 col-lg-3">
        <div class="card item-card border-0 shadow h-100">
            <div class="card-body text-center p-3">
                <div class="position-absolute top-0 end-0 m-2">
                    @{
                        var isFavourite = await CheckIfFavourite(item.ItemId);
                    }
                    <i class="@(isFavourite ? "fa-solid text-danger" : "fa-regular") fa-heart fs-4"
                        onclick="toggleWishlist(event, this)" data-item-id="@item.ItemId"
                        title="@(isFavourite ? "Remove from wishlist" : "Add to wishlist")"></i>
                </div>
                <img src="@item.ThumbnailImageUrl" class="card-img-top rounded img-fluid mb-3 cursorPointer" title="Move to Item Details"
                    style="height: 180px; object-fit: contain;"
                    onclick="window.location.href='@Url.Action("ItemDetails", "Items", new { itemId = item.ItemId })'">
                <h5 class="card-title fw-bold text-dark">@item.ItemName</h5>
                <p class="card-text text-dark">Price : <span class="text-success fw-bold">@item.Price.ToString("C")</span>
                </p>
                <p class="small text-muted truncate-text" title="@item.Details">@item.Details</p>
                <div class="mt-3">
                    <button class="btn hollow-btn w-100 mb-2" onclick="addToCart(@item.ItemId)">
                        <i class="fa-solid fa-cart-plus pe-2"></i> Add to Cart
                    </button>
                    <button class="btn solid-btn w-100"
                        onclick="showBuyNowModal(@item.ItemId, '@item.ItemName', @item.Price)">Buy Now</button>
                </div>
            </div>
        </div>
    </div>
}

@functions {
    private async Task<bool> CheckIfFavourite(int itemId)
    {
        if (!User.Identity.IsAuthenticated) return false;
        var userId = int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));
        var wishlistService = Context.RequestServices.GetService<IWishListService>();
        return await wishlistService.IsItemInWishlist(userId, itemId);
    }
}


<script>

    function LoadUserNavbar() {
        $.ajax({
            url: "/Items/GetUserNavbarData",
            type: "GET",
            success: function (data) {
                $("#Navbar").html(data);
            },
            error: function () {
                callErrorToaster("Error loading navbar");
            }
        });
    }

    // Function to add item into Cart
    function addToCart(itemId) {
        $.ajax({
            url: "/Items/AddToCart",
            type: "POST",
            data: { itemId: itemId, quantity: 1 },
            success: function (response) {
                if (response.success) {
                    callSuccessToaster("Item added to cart!");
                    LoadUserNavbar();
                } else {
                    callErrorToaster(response.message);
                }
            },
            error: function () {
                callErrorToaster("Failed to add item to cart");
            }
        });
    }

    function toggleWishlist(event, element) {
        event.preventDefault();
        event.stopPropagation();

        const itemId = $(element).data('item-id');
        $.ajax({
            url: "/Items/ToggleWishlistItem",
            type: "POST",
            data: { itemId: itemId },
            success: function (response) {
                if (response.success) {
                    if (response.isFavourite) {
                        $(element).removeClass('fa-regular').addClass('fa-solid text-danger')
                            .attr('title', 'Remove from wishlist');
                    } else {
                        $(element).removeClass('fa-solid text-danger').addClass('fa-regular')
                            .attr('title', 'Add to wishlist');
                    }
                }
            },
            error: function () {
                callErrorToaster('Failed to update wishlist');
            }
        });
    }

    // Function to show Order Summary on Buy Now
    function showBuyNowModal(itemId, itemName, price) {
        const quantity = 1;
        const orderItems = [{
            OrderItemId: 0,
            OrderId: 0,
            ItemId: itemId,
            ItemName: itemName,
            Price: price,
            Quantity: quantity
        }];

        let itemsHtml = `<table class="table table-striped">
                            <thead>
                                <tr>
                                    <th class="text-nowrap">Item Name</th>
                                    <th class="text-nowrap">Quantity</th>
                                    <th class="text-nowrap">Unit Price (₹)</th>
                                    <th class="text-nowrap">Sub Total (₹)</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class="text-nowrap">${itemName}</td>
                                    <td class="text-nowrap">${quantity}</td>
                                    <td class="text-nowrap">${price.toFixed(2)}</td>
                                    <td class="text-nowrap">${(price * quantity).toFixed(2)}</td>
                                </tr>
                            </tbody>
                        </table>`;

        $("#orderItemsList").html(itemsHtml);
        $("#modalTotalAmount").text(`₹${(price * quantity).toFixed(2)}`);
        $("#orderConfirmationModal").modal('show');

        $("#confirmOrderBtn").off('click').on('click', function () {
            $.ajax({
                url: "/Items/BuyNow",
                type: "POST",
                data: { itemId: itemId, quantity: quantity },
                success: function (response) {
                    if (response.success) {
                        $("#orderConfirmationModal").modal('hide');
                        callSuccessToaster(response.message);
                        window.location.href = response.redirectUrl;
                    } else {
                        callErrorToaster(response.message);
                    }
                },
                error: function () {
                    callErrorToaster("Failed to place order");
                }
            });
        });
    }
</script>