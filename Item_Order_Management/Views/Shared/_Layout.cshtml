<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Item_Order_Management</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/Item_Order_Management.styles.css" asp-append-version="true" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
        integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/smoothness/jquery-ui.css">

</head>

<body>
    <header>
        @if (User.IsInRole("User"))
        {
            <div id="Navbar" class="shadow-lg position-fixed w-100"></div>
        }
        else if (User.IsInRole("Admin"))
        {
            <div class="shadow-lg position-fixed w-100" id="AdminNavbar" style="z-index: 2;"></div>
        }
    </header>
    <div class="container-fluid p-0">
        <main role="main" class="">
            @RenderBody()
        </main>
    </div>

    @if (User.IsInRole("User"))
    {
        <div class="modal fade" id="orderConfirmationModal" tabindex="-1" aria-labelledby="orderConfirmationModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title fw-bold fs-4" id="orderConfirmationModalLabel">Order Summary</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div id="orderItemsList"></div>
                        <hr>
                        <div class="mb-3">
                            <label class="form-label">Apply Coupons</label>
                            <div id="modalCouponCheckboxes">
                                <!-- Populated dynamically via JavaScript -->
                            </div>
                        </div>
                        <h4 class="text-end">Grand Total : <span id="modalTotalAmount"
                                class="fw-bold text-success">₹0.00</span></h4>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn hollow-btn" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn solid-btn" id="confirmOrderBtn">Place Order</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @* Logout Model *@

    <div class="modal fade" tabindex="-1" id="Logout">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title fw-bold text-secondary">Logout Confirmation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-center"> <i
                            class="fa-solid fa-triangle-exclamation fa-3x text-warning"></i>
                    </div>
                    <p class=" text-secondary text-center pt-3">Are you sure you want Logout ?</p>
                </div>
                <div class="modal-footer d-flex justify-content-center">
                    <a asp-action="Logout" asp-controller="Authentication" type="button"
                        class="btn solid-btn fw-bold">Yes</a>
                    <a type="button" class="btn btn-light fw-bold hollow-btn" data-bs-dismiss="modal">No</a>
                </div>
            </div>
        </div>
    </div>


    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/elevatezoom/3.0.8/jquery.elevatezoom.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>

    <script>
        let appliedCoupons = []; // Track applied coupons client-side

        // Function to load available coupons into modal checkboxes
        function loadModalCoupons(subtotal) {
            $.ajax({
                url: "/Items/GetAvailableCoupons",
                type: "GET",
                success: function (coupons) {
                    let html = "";
                    if (coupons.length === 0) {
                        html = "<p>No coupons available</p>";
                    } else {
                        coupons.forEach(coupon => {
                            html += `
                                <div class="form-check mb-2">
                                    <input type="checkbox" class="form-check-input modal-coupon-checkbox" id="modal-coupon-${coupon.code}" data-code="${coupon.code}" data-discount="${coupon.discountType === 'Percentage' ? (subtotal * (coupon.discountValue / 100)) : coupon.discountValue}">
                                    <label class="form-check-label" for="modal-coupon-${coupon.code}">
                                        ${coupon.code} (${coupon.discountType === "Percentage" ? `${coupon.discountValue}% off` : `₹${coupon.discountValue} off`})
                                    </label>
                                </div>`;
                        });
                    }
                    $("#modalCouponCheckboxes").html(html);
        @* updateModalTotal(); // Update total when coupons load *@
                },
                error: function () {
                    callErrorToaster("Failed to load coupons. Please try again.");
                }
            });
        }

        // Function to update modal total based on applied coupons
        function updateModalTotal(subtotal) {
            const totalDiscount = appliedCoupons.reduce((sum, c) => sum + parseFloat(c.discount), 0);
            $("#modalTotalAmount").text(`₹${(subtotal - totalDiscount).toFixed(2)}`);
        }

        // Function to toggle coupon application
        function toggleModalCoupon(code, isChecked, subtotal) {
            const discount = $(`#modal-coupon-${code}`).data("discount");
            if (isChecked) {
                appliedCoupons.push({ code: code, discount: discount });
            } else {
                appliedCoupons = appliedCoupons.filter(c => c.code !== code);
            }
            updateModalTotal(subtotal);
        }

        // Update showOrderConfirmationModal to include coupon logic
        function showOrderConfirmationModal() {
            let orderItems = [];
            let subtotal = 0;
            let hasOutOfStock = false;
            let outOfStockMessages = [];

            $(".cart-item").each(function () {
                const price = parseFloat($(this).data("price"));
                const quantity = parseInt($(this).find(".quantity-input").val());
                const itemName = $(this).find(".card-title").text();
                const itemId = $(this).find(".remove-btn").data("item-id");
                const stock = parseInt($(this).data("stock"));

                orderItems.push({
                    OrderItemId: 0,
                    OrderId: 0,
                    ItemId: itemId,
                    ItemName: itemName,
                    Price: price,
                    Quantity: quantity,
                    Stock: stock,
                    ImageURL: $(this).find("img").attr("src")
                });

                subtotal += price * quantity;
                if (stock === 0) {
                    hasOutOfStock = true;
                    outOfStockMessages.push(`${itemName} is out of stock`);
                } else if (quantity > stock) {
                    hasOutOfStock = true;
                    outOfStockMessages.push(`Only ${stock} units of ${itemName} available in stock`);
                }
            });

            if (hasOutOfStock) {
                callErrorToaster(outOfStockMessages.join(". "));
                return;
            }

            let itemsHtml = `<table class="table table-striped">
                                <thead><tr><th>Item Name</th><th>Quantity</th><th>Unit Price (₹)</th><th>Sub Total (₹)</th></tr></thead><tbody>`;
            orderItems.forEach(item => {
                itemsHtml += `<tr><td>${item.ItemName}</td><td>${item.Quantity}</td><td>${item.Price.toFixed(2)}</td><td>${(item.Price * item.Quantity).toFixed(2)}</td></tr>`;
            });
            itemsHtml += `</tbody></table>`;

            $("#orderItemsList").html(itemsHtml);
            appliedCoupons = []; // Reset applied coupons when modal opens
            // Change: Set initial modalTotalAmount to subtotal before loading coupons
            $("#modalTotalAmount").text(`₹${subtotal.toFixed(2)}`);
            loadModalCoupons(subtotal); // Load coupons after setting initial total

            $("#orderConfirmationModal").modal('show');

            $("#confirmOrderBtn").off('click').on('click', function () {
                const orderData = {
                    OrderId: 0,
                    CustomerName: '@User.Identity.Name',
                    Email: '@User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value',
                    PhoneNumber: 0,
                    Address: null,
                    OrderDate: new Date().toISOString(),
                    TotalAmount: subtotal - appliedCoupons.reduce((sum, c) => sum + parseFloat(c.discount), 0),
                    DiscountAmount: appliedCoupons.reduce((sum, c) => sum + parseFloat(c.discount), 0),
                    CouponCodes: appliedCoupons.map(c => c.code),
                    IsDelivered: false,
                    IsDelete: false,
                    CreatedByUser: parseInt('@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value'),
                    OrderItems: orderItems
                };

                $.ajax({
                    url: "/Items/CreateOrder",
                    type: "POST",
                    data: { orderData: JSON.stringify(orderData) },
                    success: function (response) {
                        if (response.success) {
                            $("#orderConfirmationModal").modal('hide');
                            callSuccessToaster(response.message);
                            LoadUserNavbar();
                            window.location.href = response.redirectUrl;
                        } else {
                            callErrorToaster(response.message);
                        }
                    },
                    error: function () {
                        callErrorToaster("Failed to place order. Please try again.");
                    }
                });
            });

            // Handle coupon checkbox changes in modal
            $(document).on("change", ".modal-coupon-checkbox", function () {
                const code = $(this).data("code");
                const isChecked = $(this).is(":checked");
                toggleModalCoupon(code, isChecked, subtotal);
            });
        }
    </script>

    <script>
        $(document).ready(function () {

            var successMessage = '@TempData["SuccessMessage"]';
            var errorMessage = '@TempData["ErrorMessage"]';

            toastr.options = {
                "closeButton": true,
                "timeOut": "2000"
            };

            if (successMessage) {
                toastr.success(successMessage);
            }

            if (errorMessage) {
                toastr.error(errorMessage);
            }

            // Load User navbar
            $.ajax({
                url: "/Items/GetUserNavbarData",
                type: "GET",
                success: function (data) {
                    $("#Navbar").html(data);
                },
                error: function () {
                    console.error("Error loading navbar");
                }
            });

            // Load Admin navbar
            $.ajax({
                url: "/Admin/GetAdminNavbarData",
                type: "GET",
                success: function (data) {
                    $("#AdminNavbar").html(data);
                },
                error: function () {
                    callErrorToaster("Ajax Error Loading data");
                }
            });

            // Show toaster if TempData contains error (normal request)
            // Global AJAX error catcher
            $(document).ajaxSend(function (event, xhr, settings) {
                if (xhr.getResponseHeader("X-Error") === "true") {
                    const response = xhr.responseJSON;
                    if (response && response.error) {
                        callErrorToaster(response.error);
                    }
                }
            });

        });

        function AjaxResponseHandler(response) {
            var parser = new DOMParser();
            var doc = parser.parseFromString(response, 'text/html');
            var title = doc.title;
            if (title === "Login - Item_Order_Management") {
                window.location.href = '@Url.Action("Login", "Authentication")';
            }
            else if (title === "User Dashboard - Item_Order_Management") {
                window.location.href = '@Url.Action("Dashboard", "User")';
            }
            else if (title === "InternalServerError" || title === "Forbidden" || title === "Unauthorized" || title === "PageNotFound") {
                var url = `/Error/${title}`;
                window.location.href = url;
            }
            else if (title === "InternalServerError - Item_Order_Management" || title === "Forbidden - Item_Order_Management" || title === "Unauthorized - Item_Order_Management" || title === "PageNotFound - Item_Order_Management") {
                var url = `/Error/${title.split(" ")[0].toString().trim()}`;
                window.location.href = url;
            }
            else {
                callErrorToaster('Unexpected response format.');
            }
        }

        function IsHtmlDocument(response) {

            if (response.statusCode) {
                return;
            }

            if ((response.trim().indexOf('<!DOCTYPE html>') === 0) || (response.trim().indexOf('<html>') === 0)) {
                AjaxResponseHandler(response);
            }
        }


    </script>

    <partial name="_Toaster" />
    <partial name="_ValidationScriptsPartial" />

    @await RenderSectionAsync("Scripts", required: false)
</body>

</html>
