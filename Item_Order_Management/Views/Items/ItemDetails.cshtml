@using System.Security.Claims
@using BusinessLogicLayer.Services.Interfaces
@model DataAccessLayer.ViewModels.ItemViewModel

<div class="container-fluid p-4 dashboard-color min-vh-100">
    <div class="row pt-5 justify-content-center" style="margin-top: 100px !important;">
        <div class="col-12 col-md-10 col-lg-8">
            <div class="card shadow-lg border-0 rounded-4 h-100 bg-white">
                <div class="row g-0">
                    <!-- Item Image Carousel -->
                    <div class="col-md-5 p-2 pt-4 pb-4 d-flex align-items-center justify-content-center rounded-start">
                        <div id="ImageCarousal" class="carousel slide" data-bs-ride="carousel"
                            style="width: 80% !important; height: 100% !important;">
                            <div class="carousel-inner d-flex align-content-center">
                                @if (!string.IsNullOrEmpty(Model.ThumbnailImageUrl))
                                {
                                    <div class="carousel-item active">
                                        <img src="@Model.ThumbnailImageUrl" data-zoom-image="@Model.ThumbnailImageUrl"
                                            class="ItemImage" alt="Item Image"
                                            style="width: 100% !important; height: 350px !important;" />
                                    </div>
                                }
                                @foreach (var imageUrl in Model.AdditionalImagesUrl)
                                {
                                    <div class="carousel-item">
                                        <img src="@imageUrl" data-zoom-image="@imageUrl" class="ItemImage"
                                            alt="Additional Image"
                                            style="width: 100% !important; height: 350px !important;" />
                                    </div>
                                }
                            </div>

                            @if (Model.AdditionalImagesUrl.Count > 0)
                            {
                                <button class="carousel-control-prev bg-dark" type="button" data-bs-target="#ImageCarousal"
                                    data-bs-slide="prev" style="height: 50px !important; margin-top: 150px;">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Previous</span>
                                </button>
                                <button class="carousel-control-next bg-dark" type="button" data-bs-target="#ImageCarousal"
                                    data-bs-slide="next" style="height: 50px !important; margin-top: 150px;">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Next</span>
                                </button>
                            }
                        </div>
                    </div>

                    <!-- Item Info -->
                    <div class="col-md-7">
                        <div class="card-body p-4">
                            <div class="position-absolute m-2 top-0 end-0">
                                @if (Model.Stock == 0)
                                {
                                    <div class="position-absolute top-0 ms-0 m-2 mt-0" style="right: 600px !important;">
                                        <button class="btn hollow-btn btn-sm notify-btn text-nowrap" data-item-id="@Model.ItemId"
                                            data-item-name="@Model.ItemName">Notify Me</button>
                                    </div>

                                    <div class="position-absolute top-0 m-2 mt-0 me-5" style="right: 0px;">
                                        <span class="badge fw-light"
                                            style="color: rgb(179, 0, 0); background-color: rgba(255, 71, 71, 0.336);">Out
                                            of Stock</span>
                                    </div>
                                }
                                @{
                                    var isFavourite = await CheckIfFavourite(Model.ItemId);
                                }
                                <i class="@(isFavourite ? "fa-solid text-danger" : "fa-regular") fa-heart fs-4 cursor-pointer"
                                    onclick="toggleWishlist(event, this)" data-item-id="@Model.ItemId"
                                    title="@(isFavourite ? "Remove from wishlist" : "Add to wishlist")"></i>
                            </div>
                            <h2 class="card-title fw-bold custom-text-color mb-3 pt-4">@Model.ItemName</h2>
                            <div class="my-3">
                                <h5 class="text-dark fw-semibold">Price:</h5>
                                <p class="fs-5 text-success fw-bold">@Model.Price.ToString("C")</p>
                            </div>
                            @if (Model.Stock > 0)
                            {
                                <!-- Quantity Input -->
                                <div class="d-flex align-items-center mt-3">
                                    <button class="btn hollow-btn quantity-btn minus me-2">-</button>
                                    <input type="number" class="form-control quantity-input text-center" value="1"
                                        style="width: 70px;" min="1" max="@Model.Stock" id="quantity-input" readonly>
                                    <button class="btn hollow-btn quantity-btn plus ms-2">+</button>
                                </div>
                            }
                            @if (!string.IsNullOrWhiteSpace(Model.Details))
                            {
                                <div class="mt-4">
                                    <h5 class="text-dark fw-semibold">Details:</h5>
                                    <p class="text-muted">@Model.Details</p>
                                </div>
                            }

                            <div class="d-flex justify-content-end mt-4 gap-2">
                                <a asp-action="Dashboard" asp-controller="Items" class="btn hollow-btn px-3">
                                    <i class="fa fa-arrow-left me-1"></i> Back to List
                                </a>
                                @if (Model.Stock == 0)
                                {
                                    <button class="btn hollow-btn px-3" disabled>
                                        <i class="fa-solid fa-cart-plus pe-2"></i> Add to Cart
                                    </button>
                                    <button class="btn solid-btn px-3" disabled>Buy Now</button>
                                }
                                else
                                {
                                    <button class="btn hollow-btn px-3" onclick="addToCart(@Model.ItemId)">
                                        <i class="fa-solid fa-cart-plus pe-2"></i> Add to Cart
                                    </button>
                                    <button class="btn solid-btn px-3" onclick="showBuyNowModal(@Model.ItemId)">Buy
                                        Now</button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private async Task<bool> CheckIfFavourite(int itemId)
    {
        if (!User.Identity.IsAuthenticated) return false;
        var userId = int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));
        var wishlistService = Context.RequestServices.GetService<IWishListService>();
        return await wishlistService.IsItemInWishlist(userId, itemId);
    }
}

@section Scripts {

    <script>

        // Function to Load User Navbar.
        function LoadUserNavbar() {
            $.ajax({
                url: "/Items/GetUserNavbarData",
                type: "GET",
                success: function (data) {
                    $("#Navbar").html(data);
                }
            });
        }

        // Function to Perform the elevate Zoom plugin.
        function initElevateZoomOnActive() {
            $('.zoomContainer').remove();
            $('.ItemImage').removeData('elevateZoom').unbind('.elevateZoom');
            $('.carousel-item.active .ItemImage').elevateZoom({
                zoomType: "inner",
                cursor: "pointer"
            });
        }

        // Quantity Button Handlers READY
        $(document).ready(function () {

            initElevateZoomOnActive();

            $('#ImageCarousal').on('slid.bs.carousel', function () {
                initElevateZoomOnActive();
            });

            $(".quantity-btn").on("click", function () {
                const inputTag = $(this).siblings(".quantity-input");
                let qty = parseInt(inputTag.val());
                const maxQty = parseInt(inputTag.attr("max"));

                if (isNaN(qty)) qty = 1;

                if ($(this).hasClass("plus")) {
                    if (qty < maxQty) {
                        qty = qty + 1;
                    } else {
                        callErrorToaster(`Only ${maxQty} units are available.`);
                    }
                } else {
                    qty = qty > 1 ? qty - 1 : 1;
                }
                inputTag.val(qty);
            });
        
        });
        // END READY

        // Function to toggle the wishlist item
        function toggleWishlist(event, element) {
            event.preventDefault();
            event.stopPropagation();

            const itemId = $(element).data('item-id');
            const isFavourite = $(element).hasClass('fa-solid');
            $.ajax({
                url: '@Url.Action("ToggleWishlistItem", "Items")',
                type: 'POST',
                data: { itemId: itemId },
                success: function (response) {
                    if (response.success) {
                        if (response.isFavourite) {
                            $(element).removeClass('fa-regular').addClass('fa-solid text-danger')
                                .attr('title', 'Remove from wishlist');
                        } else {
                            $(element).removeClass('fa-solid text-danger').addClass('fa-regular')
                                .attr('title', 'Add to wishlist');
                        }
                    }
                }
            });
        }

        // Function to add the item to the Cart
        function addToCart(itemId) {
            const quantity = parseInt($("#quantity-input").val());
            $.ajax({
                url: "/Items/AddToCart",
                type: "POST",
                data: { itemId: itemId, quantity: quantity },
                success: function (response) {
                    if (response.success) {
                        callSuccessToaster("Item added to cart!");
                        LoadUserNavbar();
                    } else {
                        callErrorToaster(response.message);
                    }
                }
            });
        }

        // Function to Buy particular item CHECK
        function showBuyNowModal(itemId) {
            const quantity = parseInt($("#quantity-input").val()) || 1;
            const itemName = '@Model.ItemName';
            const price = @Model.Price;

            let orderItems = [{
                OrderItemId: 0,
                OrderId: 0,
                ItemId: itemId,
                ItemName: itemName,
                Price: price,
                Quantity: quantity
            }];

            let subtotal = orderItems.reduce((sum, item) => sum + item.Quantity * item.Price, 0);
            let discount = 0;
            let grandTotal = subtotal;

            let itemsHtml = `
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th class="text-nowrap">Item Name</th>
                            <th class="text-nowrap">Quantity</th>
                            <th class="text-nowrap">Unit Price (₹)</th>
                            <th class="text-nowrap">Sub Total (₹)</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${orderItems.map(item => `
                            <tr>
                                <td class="text-nowrap">${item.ItemName}</td>
                                <td class="text-nowrap">${item.Quantity}</td>
                                <td class="text-nowrap">${item.Price.toFixed(2)}</td>
                                <td class="text-nowrap">${(item.Price * item.Quantity).toFixed(2)}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
            $("#orderItemsList").html(itemsHtml);

            // Fetch available coupons
            $.ajax({
                url: '/Items/GetAvailableCoupons',
                method: 'GET',
                data: { subTotal: grandTotal },
                success: function (coupons) {
                    let couponHtml = coupons.length > 0 ? coupons.map(coupon => `
                        <div class="form-check mb-2">
                            <input type="checkbox" class="form-check-input coupon-checkbox" 
                                   value="${coupon.code}" 
                                   data-discount-type="${coupon.discountType}" 
                                   data-discount-value="${coupon.discountValue}" 
                                   data-is-combinable="${coupon.isCombinable}"
                                   id="coupon-${coupon.couponId}">
                            <label class="form-check-label" for="coupon-${coupon.couponId}">
                                ${coupon.code} (${coupon.discountType === 'Percentage' ? `${coupon.discountValue}%` : `₹${coupon.discountValue}`})
                                ${coupon.isCombinable ? '(Combinable)' : ''}
                            </label>
                        </div>
                    `).join('') : '<p>No coupons available for this order amount.</p>';
                    $('#modalCouponCheckboxes').html(couponHtml);

                    // Handle coupon checkbox changes
                    $('.coupon-checkbox').on('change', function () {
                        let selectedCoupons = $('.coupon-checkbox:checked');
                        if (selectedCoupons.length > 2) {
                            $(this).prop('checked', false);
                            callErrorToaster('You can select a maximum of 2 coupons.');
                            return;
                        }

                        // Check if selected coupons are combinable
                        if (selectedCoupons.length === 2) {
                            let allCombinable = selectedCoupons.toArray().every(checkbox =>
                                $(checkbox).data('is-combinable') === true);
                            if (!allCombinable) {
                                $(this).prop('checked', false);
                                callErrorToaster('This coupon is non-combinable with the selected one.');
                                return;
                            }
                        }

                    // Calculate discount
                    discount = 0;
                    selectedCoupons.each(function () {
                        let coupon = $(this);
                        let discountType = coupon.data('discount-type');
                        let discountValue = parseFloat(coupon.data('discount-value'));
                        if (discountType === 'Percentage') {
                            discount += subtotal * (discountValue / 100);
                        } else {
                            discount += Math.min(discountValue, subtotal);
                        }
                    });

                    grandTotal = subtotal - discount;
                    $('#modalSubtotal').text(`₹ ${subtotal.toFixed(2)}`);
                    $('#modalDiscount').text(`- ₹ ${discount.toFixed(2)}`);
                    $('#modalTotalAmount').text(`₹ ${grandTotal.toFixed(2)}`);
                });

                // Initialize totals
                $('#modalSubtotal').text(`₹ ${subtotal.toFixed(2)}`);
                $('#modalDiscount').text(`- ₹ ${discount.toFixed(2)}`);
                $('#modalTotalAmount').text(`₹ ${grandTotal.toFixed(2)}`);
            },
            error: function () {
                $('#modalCouponCheckboxes').html('<p>Error loading coupons.</p>');
                callErrorToaster('Failed to load coupons. Please try again.');
            }
        });

        $("#orderConfirmationModal").modal('show');

        $("#confirmOrderBtn").off('click').on('click', function () {
            let selectedCoupons = $('.coupon-checkbox:checked').map(function () {
                return $(this).val();
            }).get();

            let orderData = {
                OrderItems: orderItems,
                CouponCodes: selectedCoupons,
                SubTotal: parseFloat($('#modalSubtotal').text().replace('₹', '').trim()),
                DiscountAmount: Math.abs(parseFloat($('#modalDiscount').text().replace('- ₹', '').trim())),
                TotalAmount: parseFloat($('#modalTotalAmount').text().replace('₹', '').trim()),
                OrderDate: new Date().toISOString(),
                CreatedByUser: parseInt('@(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0")')
            };

            let BuyNow = true;

            $.ajax({
                url: '/Items/CreateOrder',
                type: 'POST',
                data: { orderData: JSON.stringify(orderData), BuyNow: BuyNow },
                success: function (response) {
                    if (response.success) {
                        $("#orderConfirmationModal").modal('hide');
                        callSuccessToaster(response.message);
                        window.location.href = response.redirectUrl;
                    } else {
                        callErrorToaster(response.message);
                    }
                },
                error: function () {
                    callErrorToaster('Error placing order. Please try again.');
                }
            });
        });
    
        }

        // Function for Notify Me button
            $(document).on("click", ".notify-btn", function () {
                const itemId = $(this).data("item-id");
                const itemName = $(this).data("item-name");
                $.ajax({
                    url: "/Items/RequestStockNotification",
                    type: "POST",
                    data: { itemId: itemId, itemName: itemName },
                    success: function (response) {
                        if (response.success) {
                            $(".notify-btn").attr("disabled", true); // Disable button after request
                            callSuccessToaster(response.message);
                        } else {
                            callErrorToaster(response.message);
                        }
                    },
                    error: function () {
                        callErrorToaster("Failed to request notification. Please try again.");
                    }
                });
            });
    
    </script>
}