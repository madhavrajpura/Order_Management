@using DataAccessLayer.ViewModels
@model List<CartViewModel>

@{
    ViewData["Title"] = "My Cart";
}

<div class="container-fluid p-4 dashboard-color User-dasrboard min-vh-100">
    <div class="row mb-4">
        <div class="col-12">
            <h2 class="custom-text-color fw-bold">My Cart</h2>
        </div>
    </div>
    <div id="cart-content">
        <div id="cartItems" class="row g-4"></div>
    </div>
</div>

@section Scripts {

    <script>
        
        function LoadUserNavbar() {
            $.ajax({
                url: "/Items/GetUserNavbarData",
                type: "GET",
                success: function (data) {
                    $("#Navbar").html(data);
                },
                error: function () {
                    callErrorToaster("Error loading navbar");
                }
            });
        }

        function showOrderConfirmationModal() {
            let orderItems = [];
            let total = 0;

            $(".cart-item").each(function () {
                const price = parseFloat($(this).data("price"));
                const quantity = parseInt($(this).find(".quantity-input").val());
                const itemName = $(this).find(".card-title").text();
                const itemId = $(this).find(".remove-btn").data("item-id");

                orderItems.push({
                    OrderItemId: 0,
                    OrderId: 0,
                    ItemId: itemId,
                    ItemName: itemName,
                    Price: price,
                    Quantity: quantity
                });

                total += price * quantity;
            });

            // Populate modal with order items
            let itemsHtml = `<table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th class="text-nowrap">Item Name</th>
                                        <th class="text-nowrap">Quantity</th>
                                        <th class="text-nowrap">Unit Price (₹)</th>
                                        <th class="text-nowrap">Sub Total (₹)</th>
                                    </tr>
                                </thead>
                                <tbody>`;
            orderItems.forEach(item => {
                itemsHtml += `
                                    <tr>
                                        <td class="text-nowrap">${item.ItemName}</td>
                                        <td class="text-nowrap">${item.Quantity}</td>
                                        <td class="text-nowrap">${item.Price.toFixed(2)}</td>
                                        <td class="text-nowrap">${(item.Price * item.Quantity).toFixed(2)}</td>
                                    </tr>`;
            });
            itemsHtml += `</tbody>
                            </table>`;

            $("#orderItemsList").html(itemsHtml);
            $("#modalTotalAmount").text(`₹${total.toFixed(2)}`);
            $("#orderConfirmationModal").modal('show');

            // Store order data for confirmation
            $("#confirmOrderBtn").off('click').on('click', function () {
                const orderData = {
                    OrderId: 0,
                    OrderDate: new Date().toISOString(),
                    TotalAmount: total,
                    IsDelivered: false,
                    IsDelete: false,
                    OrderItems: orderItems
                };

                $.ajax({
                    url: "/Items/CreateOrder",
                    type: "POST",
                    data: { orderData: JSON.stringify(orderData) },
                    success: function (response) {
                        if (response.success) {
                            $("#orderConfirmationModal").modal('hide');
                            callSuccessToaster(response.message);
                            LoadUserNavbar();
                            window.location.href = response.redirectUrl;
                        } else {
                            callErrorToaster(response.message);
                        }
                    },
                    error: function () {
                        callErrorToaster("Failed to place order");
                    }
                });
            });
        }

        // Function to Load the Cart items
        function loadCartItems() {
            $.ajax({
                url: "/Items/GetCartItems",
                type: "GET",
                success: function (data) {
                    $("#cartItems").html(data);
                    updateTotalAmount();
                    LoadUserNavbar();
                },
                error: function () {
                    callErrorToaster("Error loading cart items");
                }
            });
        }

        // Function to Update the Total Amount
        function updateTotalAmount() {
            let total = 0;
            $(".cart-item").each(function () {
                const price = parseFloat($(this).data("price"));
                const quantity = parseInt($(this).find(".quantity-input").val());
                const itemTotal = price * quantity;
                $(this).find(".item-total").text(`₹${itemTotal.toFixed(2)}`);
                total += itemTotal;
            });
            $("#totalAmount").text(`₹${total.toFixed(2)}`);
        }

        function updateCartQuantity(cartId, quantity) {
            $.ajax({
                url: "/Items/UpdateCartQuantity",
                type: "POST",
                data: { cartId: cartId, quantity: quantity },
                success: function (response) {
                    if (response.success) {
                        updateTotalAmount();
                    } else {
                        loadCartItems();
                        LoadUserNavbar();
                    }
                },
                error: function () {
                    callErrorToaster("Failed to update quantity");
                    loadCartItems();
                }
            });
        }

        $(document).ready(function () {
            loadCartItems();

            $(document).on("click", ".quantity-btn", function () {
                const inputTag = $(this).siblings(".quantity-input");
                let qty = parseInt(inputTag.val());
                if (isNaN(qty)) qty = 1;
                const cardTag = $(this).closest(".cart-item");
                const cartId = cardTag.find(".remove-btn").data("cart-id");

                if ($(this).hasClass("plus")) {
                    qty += 1;
                } else {
                    qty = qty > 1 ? qty - 1 : 1;
                }

                inputTag.val(qty);
                updateCartQuantity(cartId, qty);
            });

            // Remove Button 
            $(document).on("click", ".remove-btn", function () {
                const cartId = $(this).data("cart-id");
                $.ajax({
                    url: "/Items/RemoveFromCart",
                    type: "POST",
                    data: { cartId: cartId },
                    success: function (data) {
                        $("#cartItems").html(data);
                        updateTotalAmount();
                        LoadUserNavbar();
                    },
                    error: function () {
                        callErrorToaster("Failed to remove item");
                    }
                });
            });

            $("#cartSummary .solid-btn").off('click').on('click', function () {
                showOrderConfirmationModal();
            });
        });
    </script>
}