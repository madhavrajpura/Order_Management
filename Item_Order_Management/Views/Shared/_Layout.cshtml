<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Item_Order_Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/Item_Order_Management.styles.css" asp-append-version="true" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
        integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/smoothness/jquery-ui.css">

</head>

<body>
    <header>
        @if (User.IsInRole("User"))
        {
            <div id="Navbar" class="shadow-lg position-fixed w-100"></div>
        }
        else if (User.IsInRole("Admin"))
        {
            <div class="shadow-lg position-fixed w-100" id="AdminNavbar" style="z-index: 2;"></div>
        }
    </header>
    <div class="container-fluid p-0">
        <main role="main" class="">
            @RenderBody()
        </main>
    </div>

    @if (User.IsInRole("User"))
    {
        <div class="modal fade" id="orderConfirmationModal" tabindex="-1" aria-labelledby="orderConfirmationModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title fw-bold fs-4 custom-text-color" id="orderConfirmationModalLabel">Order
                            Summary</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div id="orderItemsList"></div>
                        <hr>
                        <div class="mb-3">
                            <label class="form-label fw-bold fs-6 custom-text-color">Apply Coupons</label>
                            <div id="modalCouponCheckboxes" class="d-flex flex-column">
                            </div>
                        </div>
                        <div class="text-end">
                            <p class="mb-1">Subtotal: <span id="modalSubtotal" class="fw-bold">₹0.00</span></p>
                            <p class="mb-1">Discount: <span id="modalDiscount" class="fw-bold text-danger">-₹ 0.00</span>
                            </p>
                            <h4 class="mb-0">Grand Total: <span id="modalTotalAmount"
                                    class="fw-bold text-success">₹0.00</span></h4>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn hollow-btn" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn solid-btn" id="confirmOrderBtn">Place Order</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @* Logout Model *@

    <div class="modal fade" tabindex="-1" id="Logout">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title fw-bold text-secondary">Logout Confirmation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-center"> <i
                            class="fa-solid fa-triangle-exclamation fa-3x text-warning"></i>
                    </div>
                    <p class=" text-secondary text-center pt-3">Are you sure you want Logout ?</p>
                </div>
                <div class="modal-footer d-flex justify-content-center">
                    <a asp-action="Logout" asp-controller="Authentication" type="button"
                        class="btn solid-btn fw-bold">Yes</a>
                    <a type="button" class="btn btn-light fw-bold hollow-btn" data-bs-dismiss="modal">No</a>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/elevatezoom/3.0.8/jquery.elevatezoom.min.js"></script>

    <script>



        $(document).ready(function () {

            // Function to calculate cart total 
            function calculateCartTotal() {
                let total = 0;
                $('.cart-item').each(function () {
                    let price = parseFloat($(this).data('price'));
                    let quantity = parseInt($(this).data('quantity'));
                    total += price * quantity;
                });
                return total;
            }

            // Function to update cart summary total 
            function updateCartSummary() {
                let total = calculateCartTotal();
                $('#totalAmount').text(`₹${total.toFixed(2)}`);
            }

            // Function to open the order confirmation modal and populate data
            window.showOrderConfirmationModal = function () {
                // Collect cart items
                let cartItems = [];

                $('.cart-item').each(function () {
                    let $card = $(this);
                    let itemId = parseInt($card.data('item-id'));
                    let itemName = $card.data('item-name');
                    let price = parseFloat($card.data('price'));
                    let quantity = parseInt($card.data('quantity'));
                    let stock = parseInt($card.data('stock'));

                    // Only include items that are in stock and have valid quantity
                    if (stock > 0 && quantity <= stock) {
                        cartItems.push({
                            ItemId: itemId,
                            ItemName: itemName,
                            Price: price,
                            Quantity: quantity
                        });
                    }
                });

                // Calculate initial subtotal
                let subtotal = cartItems.reduce((sum, item) => sum + item.Quantity * item.Price, 0);
                let discount = 0;
                let grandTotal = subtotal;

                // Populate order items in modal using table format
                let itemsHtml = `
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th class="text-nowrap">Item Name</th>
                        <th class="text-nowrap">Quantity</th>
                        <th class="text-nowrap">Unit Price</th>
                        <th class="text-nowrap">Sub Total</th>
                    </tr>
                </thead>
                <tbody>
                    ${cartItems.map(item => `
                        <tr>
                            <td class="text-nowrap">${item.ItemName}</td>
                            <td class="text-nowrap">${item.Quantity}</td>
                            <td class="text-nowrap">₹ ${item.Price.toFixed(2)}</td>
                            <td class="text-nowrap">₹ ${(item.Price * item.Quantity).toFixed(2)}</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
                $('#orderItemsList').html(itemsHtml);

                // Fetch available coupons
                $.ajax({
                    url: '/Items/GetAvailableCoupons',
                    method: 'GET',
                    data: { subTotal: grandTotal },
                    success: function (coupons) {
                        let couponHtml = coupons.length > 0 ? coupons.map(coupon => `
                    <div class="form-check mb-2">
                        <input type="checkbox" class="form-check-input coupon-checkbox" 
                               value="${coupon.code}" 
                               data-discount-type="${coupon.discountType}" 
                               data-discount-value="${coupon.discountValue}" 
                               data-is-combinable="${coupon.isCombinable}"
                               id="coupon-${coupon.couponId}">
                        <label class="form-check-label" for="coupon-${coupon.couponId}">
                            ${coupon.code} (${coupon.discountType === 'Percentage' ? `${coupon.discountValue}%` : `₹${coupon.discountValue}`})
                            ${coupon.isCombinable ? '(Combinable)' : ''}
                        </label>
                    </div>
                `).join('') : '<p>No coupons available.</p>';
                        $('#modalCouponCheckboxes').html(couponHtml);

                        // Handle coupon checkbox changes
                        $('.coupon-checkbox').on('change', function () {
                            let selectedCoupons = $('.coupon-checkbox:checked');
                            if (selectedCoupons.length > 2) {
                                $(this).prop('checked', false);
                                callErrorToaster('You can select a maximum of 2 coupons.');
                                return;
                            }

                            // Check if selected coupons are combinable
                            if (selectedCoupons.length === 2) {
                                let allCombinable = selectedCoupons.toArray().every(checkbox =>
                                    $(checkbox).data('is-combinable') === true);
                                if (!allCombinable) {
                                    $(this).prop('checked', false);
                                    callErrorToaster('This coupon is non Combinable with selected one.');
                                    return;
                                }
                            }

                            // Calculate discount
                            discount = 0;
                            selectedCoupons.each(function () {
                                let coupon = $(this);
                                let discountType = coupon.data('discount-type');
                                let discountValue = parseFloat(coupon.data('discount-value'));
                                if (discountType === 'Percentage') {
                                    discount += subtotal * (discountValue / 100);
                                } else {
                                    discount += Math.min(discountValue, subtotal);
                                }
                            });

                            grandTotal = subtotal - discount;
                            $('#modalSubtotal').text(`₹ ${subtotal.toFixed(2)}`);
                            $('#modalDiscount').text(`- ₹ ${discount.toFixed(2)}`);
                            $('#modalTotalAmount').text(`₹ ${grandTotal.toFixed(2)}`);
                        });

                        // Initialize totals
                        $('#modalSubtotal').text(`₹ ${subtotal.toFixed(2)}`);
                        $('#modalDiscount').text(`- ₹ ${discount.toFixed(2)}`);
                        $('#modalTotalAmount').text(`₹ ${grandTotal.toFixed(2)}`);
                    }
                });

                $('#orderConfirmationModal').modal('show');
            };

            // Handle place order button click
            $('#confirmOrderBtn').on('click', function () {
                let cartItems = [];
                $('.cart-item').each(function () {
                    let $card = $(this);
                    let itemId = parseInt($card.data('item-id'));
                    let itemName = $card.data('item-name')
                    let price = parseFloat($card.data('price'));
                    let quantity = parseInt($card.data('quantity'));
                    let stock = parseInt($card.data('stock'));

                    if (stock > 0 && quantity <= stock) {
                        cartItems.push({
                            ItemId: itemId,
                            ItemName: itemName,
                            Price: price,
                            Quantity: quantity
                        });
                    }
                });

                let selectedCoupons = $('.coupon-checkbox:checked').map(function () {
                    return $(this).val();
                }).get();

                let orderData = {
                    OrderItems: cartItems,
                    CouponCodes: selectedCoupons,
                    SubTotal: parseFloat($('#modalSubtotal').text().replace('₹', '').trim()),
                    DiscountAmount: Math.abs(parseFloat($('#modalDiscount').text().replace('- ₹', '').trim())),
                    TotalAmount: parseFloat($('#modalTotalAmount').text().replace('₹', '').trim()),
                    OrderDate: new Date().toISOString(),
                    CreatedByUser: parseInt('@(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0")')
                };

                let BuyNow = false;

                $.ajax({
                    url: '/Items/CreateOrder',
                    method: 'POST',
                    data: { orderData: JSON.stringify(orderData), BuyNow: BuyNow },
                    success: function (response) {
                        if (response.success) {
                            window.location.href = response.redirectUrl;
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function () {
                        alert('Error placing order.');
                    }
                });
            });

            // Handle quantity updates in cart view
            $('.quantity-btn').on('click', function () {
                let $card = $(this).closest('.cart-item');
                let $input = $card.find('.quantity-input');
                let quantity = parseInt($input.val());
                let stock = parseInt($card.data('stock'));
                let price = parseFloat($card.data('price'));

                if ($(this).hasClass('plus') && quantity < stock) {
                    quantity++;
                } else if ($(this).hasClass('minus') && quantity > 1) {
                    quantity--;
                }

                $input.val(quantity);
                $card.data('quantity', quantity);
                $card.find('.item-total').text(`₹${(quantity * price).toFixed(2)}`);
                updateCartSummary();
            });

            // Initialize cart summary on page load
            updateCartSummary();
        });
    </script>

    <script>
        $(document).ready(function () {

            var successMessage = '@TempData["SuccessMessage"]';
            var errorMessage = '@TempData["ErrorMessage"]';

            toastr.options = {
                "closeButton": true,
                "timeOut": "2000"
            };

            if (successMessage) {
                toastr.success(successMessage);
            }

            if (errorMessage) {
                toastr.error(errorMessage);
            }

            // Load User navbar
            $.ajax({
                url: "/Items/GetUserNavbarData",
                type: "GET",
                success: function (data) {
                    $("#Navbar").html(data);
                },
                error: function () {
                    console.error("Error loading navbar");
                }
            });

            // Load Admin navbar
            $.ajax({
                url: "/Admin/GetAdminNavbarData",
                type: "GET",
                success: function (data) {
                    $("#AdminNavbar").html(data);
                },
                error: function () {
                    callErrorToaster("Ajax Error Loading data");
                }
            });

            // Show toaster if TempData contains error (normal request)
            // Global AJAX error catcher
            $(document).ajaxSend(function (event, xhr, settings) {
                if (xhr.getResponseHeader("X-Error") === "true") {
                    const response = xhr.responseJSON;
                    if (response && response.error) {
                        callErrorToaster(response.error);
                    }
                }
            });

        });

        function AjaxResponseHandler(response) {
            var parser = new DOMParser();
            var doc = parser.parseFromString(response, 'text/html');
            var title = doc.title;
            if (title === "Login - Item_Order_Management") {
                window.location.href = '@Url.Action("Login", "Authentication")';
            }
            else if (title === "User Dashboard - Item_Order_Management") {
                window.location.href = '@Url.Action("Dashboard", "User")';
            }
            else if (title === "InternalServerError" || title === "Forbidden" || title === "Unauthorized" || title === "PageNotFound") {
                var url = `/Error/${title}`;
                window.location.href = url;
            }
            else if (title === "InternalServerError - Item_Order_Management" || title === "Forbidden - Item_Order_Management" || title === "Unauthorized - Item_Order_Management" || title === "PageNotFound - Item_Order_Management") {
                var url = `/Error/${title.split(" ")[0].toString().trim()}`;
                window.location.href = url;
            }
            else {
                callErrorToaster('Unexpected response format.');
            }
        }

        function IsHtmlDocument(response) {

            if (response.statusCode) {
                return;
            }

            if ((response.trim().indexOf('<!DOCTYPE html>') === 0) || (response.trim().indexOf('<html>') === 0)) {
                AjaxResponseHandler(response);
            }
        }


    </script>

    <partial name="_Toaster" />
    <partial name="_ValidationScriptsPartial" />

    @await RenderSectionAsync("Scripts", required: false)
</body>

</html>
