@using System.Security.Claims
@using BusinessLogicLayer.Services.Interfaces
@model DataAccessLayer.ViewModels.ItemViewModel

<div class="container-fluid p-4 dashboard-color min-vh-100">
    <div class="row pt-5 justify-content-center" style="margin-top: 100px !important;">
        <div class="col-12 col-md-10 col-lg-8">
            <div class="card shadow-lg border-0 rounded-4 h-100 bg-white">
                <div class="row g-0">
                    <!-- Item Image -->
                    <div class="col-md-5 p-2 d-flex align-items-center justify-content-center rounded-start">
                        <img src="@Model.ThumbnailImageUrl" alt="@Model.ItemName" class="img-fluid rounded"
                            style="max-height: 450px; object-fit: contain;">
                    </div>

                    <!-- Item Info -->
                    <div class="col-md-7">
                        <div class="card-body p-4">
                            <div class="position-absolute m-2" style="top:10px; right:20px">
                            @{
                                var isFavourite = await CheckIfFavourite(Model.ItemId);
                            }
                            <i class="@(isFavourite ? "fa-solid text-danger" : "fa-regular") fa-heart fs-4 cursor-pointer"
                                onclick="toggleWishlist(event, this)" data-item-id="@Model.ItemId"
                                title="@(isFavourite ? "Remove from wishlist" : "Add to wishlist")"></i>
                        </div>
                        <h2 class="card-title fw-bold custom-text-color mb-3">@Model.ItemName</h2>
                        <div class="my-3">
                            <h5 class="text-dark fw-semibold">Price:</h5>
                            <p class="fs-5 text-success fw-bold">₹@Model.Price.ToString("F2")</p>
                        </div>
                        <!-- Quantity Input -->
                        <div class="d-flex align-items-center mt-3">
                            <button class="btn hollow-btn quantity-btn minus me-2">-</button>
                            <input type="number" class="form-control quantity-input text-center" value="1"
                                style="width: 70px;" min="1" id="quantity-input">
                            <button class="btn hollow-btn quantity-btn plus ms-2">+</button>
                        </div>
                        @if (!string.IsNullOrWhiteSpace(Model.Details))
                        {
                            <div class="mt-4">
                                <h5 class="text-dark fw-semibold">Details:</h5>
                                <p class="text-muted">@Model.Details</p>
                            </div>
                        }

                        <div class="d-flex justify-content-end mt-4 gap-2">
                            <a asp-action="Dashboard" asp-controller="Items" class="btn hollow-btn px-3">
                                <i class="fa fa-arrow-left me-1"></i> Back to List
                            </a>
                            <button class="btn hollow-btn px-3" onclick="addToCart(@Model.ItemId)">
                                <i class="fa-solid fa-cart-plus pe-2"></i> Add to Cart
                            </button>
                            <!-- CHANGED: Updated Buy Now to trigger modal -->
                            <button class="btn solid-btn px-3" onclick="showBuyNowModal(@Model.ItemId)">Buy Now</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private async Task<bool> CheckIfFavourite(int itemId)
    {
        if (!User.Identity.IsAuthenticated) return false;
        var userId = int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));
        var wishlistService = Context.RequestServices.GetService<IWishListService>();
        return await wishlistService.IsItemInWishlist(userId, itemId);
    }
}

@section Scripts {
    <script>
        // Quantity Button Handlers
        $(document).ready(function () {
            $(".quantity-btn").on("click", function () {
                const inputTag = $(this).siblings(".quantity-input");
                let qty = parseInt(inputTag.val());
                if (isNaN(qty)) qty = 1; // Reset to 1 if invalid

                if ($(this).hasClass("plus")) {
                    qty += 1;
                } else {
                    qty = qty > 1 ? qty - 1 : 1;
                }
                inputTag.val(qty);
            });
        });

        function toggleWishlist(event, element) {
            event.preventDefault();
            event.stopPropagation();

            const itemId = $(element).data('item-id');
            const isFavourite = $(element).hasClass('fa-solid');
            $.ajax({
                url: '@Url.Action("ToggleWishlistItem", "Items")',
                type: 'POST',
                data: { itemId: itemId },
                success: function (response) {
                    if (response.success) {
                        if (response.isFavourite) {
                            $(element).removeClass('fa-regular').addClass('fa-solid text-danger')
                                .attr('title', 'Remove from wishlist');
                        } else {
                            $(element).removeClass('fa-solid text-danger').addClass('fa-regular')
                                .attr('title', 'Add to wishlist');
                        }
                    }
                },
                error: function () {
                    callErrorToaster('Failed to update wishlist');
                }
            });
        }

        function addToCart(itemId) {
            const quantity = parseInt($("#quantity-input").val());
            $.ajax({
                url: "/Items/AddToCart",
                type: "POST",
                data: { itemId: itemId, quantity: quantity },
                success: function (response) {
                    if (response.success) {
                        callSuccessToaster("Item added to cart!");
                    } else {
                        callErrorToaster(response.message);
                    }
                },
                error: function () {
                    callErrorToaster("Failed to add item to cart");
                }
            });
        }

        // CHANGED: Added function to show Buy Now modal
        function showBuyNowModal(itemId) {
            const quantity = parseInt($("#quantity-input").val());
            const itemName = '@Model.ItemName';
            const price = @Model.Price;

            const orderItems = [{
                OrderItemId: 0,
                OrderId: 0,
                ItemId: itemId,
                ItemName: itemName,
                Price: price,
                Quantity: quantity
            }];

            let itemsHtml = `<table class="table table-striped">
                            <thead>
                                <tr>
                                    <th class="text-nowrap">Item Name</th>
                                    <th class="text-nowrap">Quantity</th>
                                    <th class="text-nowrap">Unit Price (₹)</th>
                                    <th class="text-nowrap">Sub Total (₹)</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class="text-nowrap">${itemName}</td>
                                    <td class="text-nowrap">${quantity}</td>
                                    <td class="text-nowrap">${price.toFixed(2)}</td>
                                    <td class="text-nowrap">${(price * quantity).toFixed(2)}</td>
                                </tr>
                            </tbody>
                        </table>`;

            $("#orderItemsList").html(itemsHtml);
            $("#modalTotalAmount").text(`₹${(price * quantity).toFixed(2)}`);
            $("#orderConfirmationModal").modal('show');

            $("#confirmOrderBtn").off('click').on('click', function () {
                $.ajax({
                    url: "/Items/BuyNow",
                    type: "POST",
                    data: { itemId: itemId, quantity: quantity },
                    success: function (response) {
                        if (response.success) {
                            $("#orderConfirmationModal").modal('hide');
                            callSuccessToaster(response.message);
                            window.location.href = response.redirectUrl;
                        } else {
                            callErrorToaster(response.message);
                        }
                    },
                    error: function () {
                        callErrorToaster("Failed to place order");
                    }
                });
            });
        }
    </script>
}