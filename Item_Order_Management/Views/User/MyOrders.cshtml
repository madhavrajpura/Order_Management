@model List<DataAccessLayer.ViewModels.OrderViewModel>

@{
    ViewData["Title"] = "My Orders";
}

<div id="Navbar" class="shadow-lg position-fixed w-100"></div>

<div class="container-fluid p-4 dashboard-color User-dasrboard min-vh-100">
    <div class="row mb-4">
        <div class="col-12">
            <h2 class="custom-text-color fw-bold">My Orders</h2>
        </div>
    </div>
    <div class="row">
        @if (!Model.Any())
        {
            <div class="text-center py-5">
                <i class="fa-solid fa-box-open fa-4x text-muted mb-3"></i>
                <h4 class="text-muted">No orders yet</h4>
                <p class="text-muted">Start shopping to see your orders here</p>
                <a href="@Url.Action("Dashboard", "User")" class="btn solid-btn mt-3">Browse Items</a>
            </div>
        }
        else
        {
            foreach (var order in Model)
            {
                <div class="col-12 mb-4">
                    <div class="card shadow-lg border-0 rounded-4">
                        <div class="card-body p-4">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 class="card-title fw-bold custom-text-color">Order #@order.Id</h5>
                                <span class="badge bg-@(order.IsDelivered ? "success" : "warning")">
                                    @order.Status
                                </span>
                            </div>
                            <p class="card-text"><strong>Order Date:</strong> @order.OrderDate.ToString("g")</p>
                            <p class="card-text"><strong>Total Amount:</strong> ₹@order.TotalAmount.ToString("F2")</p>
                            <div class="row mt-3">
                                @foreach (var item in order.Items)
                                {
                                    <div class="col-12 mb-2">
                                        <div class="d-flex align-items-center">
                                            <img src="@item.ThumbnailImageUrl" alt="@item.ItemName" class="rounded" style="width: 50px; height: 50px; object-fit: cover;">
                                            <div class="ms-3">
                                                <p class="mb-0"><strong>@item.ItemName</strong></p>
                                                <p class="mb-0 text-muted">₹@item.Price.ToString("F2") x @item.Quantity</p>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="d-flex justify-content-end mt-3">
                                <button class="btn hollow-btn me-2" onclick="editOrder(@order.Id, @order.TotalAmount)"
                                        @(order.IsDelivered ? "disabled" : "") @(new TimeSpan(DateTime.Now.Ticks - order.OrderDate.Ticks).TotalDays > 2 ? "disabled" : "")
                                        title="@(order.IsDelivered ? "Order delivered" : (new TimeSpan(DateTime.Now.Ticks - order.OrderDate.Ticks).TotalDays > 2 ? "Edit not allowed after 2 days" : ""))">
                                    <i class="fa-solid fa-edit"></i> Edit
                                </button>
                                <button class="btn solid-btn" onclick="deleteOrder(@order.Id)"
                                        @(order.IsDelivered ? "disabled" : "") @(new TimeSpan(DateTime.Now.Ticks - order.OrderDate.Ticks).TotalDays > 2 ? "disabled" : "")
                                        title="@(order.IsDelivered ? "Order delivered" : (new TimeSpan(DateTime.Now.Ticks - order.OrderDate.Ticks).TotalDays > 2 ? "Delete not allowed after 2 days" : ""))">
                                    <i class="fa-solid fa-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@section Scripts {
    <script src="~/js/common.js"></script>
    <script>
        function editOrder(orderId, currentTotal) {
            const newTotal = prompt("Enter new total amount:", currentTotal);
            if (newTotal === null) return; // Cancelled
            const amount = parseFloat(newTotal);
            if (isNaN(amount) || amount <= 0) {
                if (typeof callErrorToaster === 'function') {
                    callErrorToaster("Invalid amount");
                }
                return;
            }
            $.ajax({
                url: "/User/EditOrder",
                type: "POST",
                data: { orderId: orderId, newTotalAmount: amount },
                success: function (response) {
                    if (response.success) {
                        if (typeof callSuccessToaster === 'function') {
                            callSuccessToaster(response.message);
                        }
                        location.reload();
                    } else {
                        if (typeof callErrorToaster === 'function') {
                            callErrorToaster(response.message);
                        }
                    }
                },
                error: function () {
                    if (typeof callErrorToaster === 'function') {
                        callErrorToaster("Failed to edit order");
                    }
                }
            });
        }

        function deleteOrder(orderId) {
            if (confirm("Are you sure you want to delete this order?")) {
                $.ajax({
                    url: "/User/DeleteOrder",
                    type: "POST",
                    data: { orderId: orderId },
                    success: function (response) {
                        if (response.success) {
                            if (typeof callSuccessToaster === 'function') {
                                callSuccessToaster(response.message);
                            }
                            location.reload();
                        } else {
                            if (typeof callErrorToaster === 'function') {
                                callErrorToaster(response.message);
                            }
                        }
                    },
                    error: function () {
                        if (typeof callErrorToaster === 'function') {
                            callErrorToaster("Failed to delete order");
                        }
                    }
                });
            }
        }
    </script>
}