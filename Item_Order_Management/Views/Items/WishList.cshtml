@model List<DataAccessLayer.ViewModels.WishListViewModel>

@{
    ViewData["Title"] = "My WishList";
}

<div class="container-fluid p-4 dashboard-color User-dasrboard min-vh-100">
    <!-- My Wishlist Text -->
    <div class="row mb-4">
        <div class="col-12">
            <h2 class="custom-text-color fw-bold">My Wishlist</h2>
        </div>
        @if (Model.Any())
        {
            <div class="col-12 text-end">
                <button class="btn solid-btn" onclick="addAllToCart()" 
                        disabled="@(!Model.Any(item => item.Stock > 0))">Add All to Cart</button>
            </div>
        }
    </div>

    <!-- Wishlist Main Content -->
    <div id="wishlist-content">
        @if (Model.Any())
        {
            <div class="row g-4" id="wishlistItems">
                @foreach (var item in Model)
                {
                    <div class="col-12 col-md-4 col-lg-3">
                        <div class="card item-card border-0 shadow h-100">
                            <div class="card-body text-center p-3">
                                <div class="position-absolute top-0 end-0 m-2">
                                    <i class="fa-solid fa-heart fs-3 d-flex justify-content-end text-danger"
                                       onclick="toggleWishlist(event, this)" data-item-id="@item.ItemId"
                                       title="Remove from wishlist"></i>
                                </div>
                                @if (item.Stock == 0)
                {
                    <div class="position-absolute top-0 end-0 m-2 me-5">
                        <span class="badge fw-light"
                            style="color: rgb(179, 0, 0); background-color: rgba(255, 71, 71, 0.336);">Out of Stock</span>
                    </div>

                    <div class="position-absolute top-0 end-75 ms-0 m-2">
                        <button class="btn hollow-btn btn-sm notify-btn" data-item-id="@item.ItemId"
                            data-item-name="@item.ItemName">Notify Me</button>
                    </div>
                }
                                <img src="@item.ThumbnailImageUrl" class="card-img-top rounded img-fluid mb-3 cursor-pointer"
                                     style="height: 180px; object-fit: contain;"
                                     onclick="window.location.href='@Url.Action("ItemDetails", "Items", new { itemId = item.ItemId })'">
                                <h5 class="card-title fw-bold text-dark">@item.ItemName</h5>
                                <p class="card-text text-dark">Price : <span
                                        class="text-success fw-bold">@item.Price.ToString("C")</span></p>
                                <p class="small text-muted truncate-text" title="@item.Details">@item.Details</p>
                                <div class="mt-3">
                                    @if (item.Stock == 0)
                                    {
                                        <button class="btn hollow-btn w-100 mb-2" disabled>
                                            <i class="fa-solid fa-cart-plus pe-2"></i> Add to Cart
                                        </button>
                                        <button class="btn solid-btn w-100" disabled>Buy Now</button>
                                    }
                                    else
                                    {
                                        <button class="btn hollow-btn w-100 mb-2" onclick="addToCart(@item.ItemId)">
                                            <i class="fa-solid fa-cart-plus pe-2"></i> Add to Cart
                                        </button>
                                        <button class="btn solid-btn w-100" data-qty="1" id="BuyNow"
                                                onclick="showBuyNowModal(@item.ItemId, '@item.ItemName', @item.Price,1)">Buy Now</button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fa-regular fa-heart fa-4x text-muted mb-3"></i>
                <h4 class="text-muted">Your wishlist is empty</h4>
                <p class="text-muted">Add items to your wishlist to see them here</p>
                <a href="@Url.Action("Dashboard", "Items")" class="btn solid-btn mt-3">Browse Items</a>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>

        // Function to Load User Navbar.
        function LoadUserNavbar() {
            $.ajax({
                url: "/Items/GetUserNavbarData",
                type: "GET",
                success: function (data) {
                    $("#Navbar").html(data);
                }
            });
        }

        // Function to Toggle Wishlist items.
        function toggleWishlist(event, element) {
            event.preventDefault();
            event.stopPropagation();

            const itemId = $(element).data('item-id');

            $.ajax({
                url: "/Items/ToggleWishlistItem",
                type: 'POST',
                data: { itemId: itemId },
                success: function (response) {
                    if (response.success) {
                        $(element).closest('.col-12').fadeOut(300, function () {
                            $(this).remove();

                            if ($('#wishlistItems .col-12').length === 0) {
                                $('#wishlist-content').html(`
                                    <div class="text-center py-5">
                                        <i class="fa-regular fa-heart fa-4x text-muted mb-3"></i>
                                        <h4 class="text-muted">Your wishlist is empty</h4>
                                        <p class="text-muted">Add items to your wishlist to see them here</p>
                                        <a href="@Url.Action("Dashboard", "Items")" class="btn solid-btn mt-3">Browse Items</a>
                                    </div>
                                `);
                            }
                        });
                    }
                }
            });
        }

        // Function to Add items into Cart
        function addToCart(itemId) {
            $.ajax({
                url: "/Items/AddToCart",
                type: "POST",
                data: { itemId: itemId, quantity: 1 },
                success: function (response) {
                    if (response.success) {
                        callSuccessToaster(response.message);
                        LoadUserNavbar();
                    } else {
                        callErrorToaster(response.message);
                    }
                }
            });
        }

        // Function to Add all items into the Cart
        function addAllToCart() {
            $.ajax({
                url: "/Items/AddAllFromWishlistToCart",
                type: "POST",
                success: function (response) {
                    if (response.success) {
                        callSuccessToaster(response.message);
                        LoadUserNavbar();
                    } else {
                        callErrorToaster(response.message);
                    }
                }
            });
        }

        // Function to show Order Summary on Buy Now
    function showBuyNowModal(itemId, itemName, price, quantity) {
        let orderItems = [{
            OrderItemId: 0,
            OrderId: 0,
            ItemId: itemId,
            ItemName: itemName,
            Price: price,
            Quantity: quantity
        }];

        let subtotal = orderItems.reduce((sum, item) => sum + item.Quantity * item.Price, 0);
        let discount = 0;
        let grandTotal = subtotal;

        let itemsHtml = `
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th class="text-nowrap">Item Name</th>
                        <th class="text-nowrap">Quantity</th>
                        <th class="text-nowrap">Unit Price (₹)</th>
                        <th class="text-nowrap">Sub Total (₹)</th>
                    </tr>
                </thead>
                <tbody>
                    ${orderItems.map(item => `
                        <tr>
                            <td class="text-nowrap">${item.ItemName}</td>
                            <td class="text-nowrap">${item.Quantity}</td>
                            <td class="text-nowrap">${item.Price.toFixed(2)}</td>
                            <td class="text-nowrap">${(item.Price * item.Quantity).toFixed(2)}</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
        $("#orderItemsList").html(itemsHtml);

        // Fetch available coupons
        $.ajax({
            url: '/Items/GetAvailableCoupons',
            method: 'GET',
            data: { subTotal: grandTotal },
            success: function (coupons) {
                let couponHtml = coupons.length > 0 ? coupons.map(coupon => `
                    <div class="form-check mb-2">
                        <input type="checkbox" class="form-check-input coupon-checkbox" 
                               value="${coupon.code}" 
                               data-discount-type="${coupon.discountType}" 
                               data-discount-value="${coupon.discountValue}" 
                               data-is-combinable="${coupon.isCombinable}"
                               id="coupon-${coupon.couponId}">
                        <label class="form-check-label" for="coupon-${coupon.couponId}">
                            ${coupon.code} (${coupon.discountType === 'Percentage' ? `${coupon.discountValue}%` : `₹${coupon.discountValue}`})
                            ${coupon.isCombinable ? '(Combinable)' : ''}
                        </label>
                    </div>
                `).join('') : '<p>No coupons available for this order amount.</p>';
                $('#modalCouponCheckboxes').html(couponHtml);

                // Handle coupon checkbox changes
                $('.coupon-checkbox').on('change', function () {
                    let selectedCoupons = $('.coupon-checkbox:checked');
                    if (selectedCoupons.length > 2) {
                        $(this).prop('checked', false);
                        callErrorToaster('You can select a maximum of 2 coupons.');
                        return;
                    }

                    // Check if selected coupons are combinable
                    if (selectedCoupons.length === 2) {
                        let allCombinable = selectedCoupons.toArray().every(checkbox =>
                            $(checkbox).data('is-combinable') === true);
                        if (!allCombinable) {
                            $(this).prop('checked', false);
                            callErrorToaster('This coupon is non-combinable with the selected one.');
                            return;
                        }
                    }

                    // Calculate discount
                    discount = 0;
                    selectedCoupons.each(function () {
                        let coupon = $(this);
                        let discountType = coupon.data('discount-type');
                        let discountValue = parseFloat(coupon.data('discount-value'));
                        if (discountType === 'Percentage') {
                            discount += subtotal * (discountValue / 100);
                        } else {
                            discount += Math.min(discountValue, subtotal);
                        }
                    });

                    grandTotal = subtotal - discount;
                    $('#modalSubtotal').text(`₹ ${subtotal.toFixed(2)}`);
                    $('#modalDiscount').text(`- ₹ ${discount.toFixed(2)}`);
                    $('#modalTotalAmount').text(`₹ ${grandTotal.toFixed(2)}`);
                });

                // Initialize totals
                $('#modalSubtotal').text(`₹ ${subtotal.toFixed(2)}`);
                $('#modalDiscount').text(`- ₹ ${discount.toFixed(2)}`);
                $('#modalTotalAmount').text(`₹ ${grandTotal.toFixed(2)}`);
            },
            error: function () {
                $('#modalCouponCheckboxes').html('<p>Error loading coupons.</p>');
                callErrorToaster('Failed to load coupons. Please try again.');
            }
        });

        $("#orderConfirmationModal").modal('show');

        $("#confirmOrderBtn").off('click').on('click', function () {
            let selectedCoupons = $('.coupon-checkbox:checked').map(function () {
                return $(this).val();
            }).get();

            let orderData = {
                OrderItems: orderItems,
                CouponCodes: selectedCoupons,
                SubTotal: parseFloat($('#modalSubtotal').text().replace('₹', '').trim()),
                DiscountAmount: Math.abs(parseFloat($('#modalDiscount').text().replace('- ₹', '').trim())),
                TotalAmount: parseFloat($('#modalTotalAmount').text().replace('₹', '').trim()),
                OrderDate: new Date().toISOString(),
                CreatedByUser: parseInt('@(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0")')
            };

            let BuyNow = true;

            $.ajax({
                url: '/Items/CreateOrder',
                type: 'POST',
                data: { orderData: JSON.stringify(orderData), BuyNow: BuyNow },
                success: function (response) {
                    if (response.success) {
                        $("#orderConfirmationModal").modal('hide');
                        callSuccessToaster(response.message);
                        window.location.href = response.redirectUrl;
                    } else {
                        callErrorToaster(response.message);
                    }
                },
                error: function () {
                    callErrorToaster('Error placing order. Please try again.');
                }
            });
        });
    }

        // Function for Notify Me button
            $(document).on("click", ".notify-btn", function () {
                const itemId = $(this).data("item-id");
                const itemName = $(this).data("item-name");
                $.ajax({
                    url: "/Items/RequestStockNotification",
                    type: "POST",
                    data: { itemId: itemId, itemName: itemName },
                    success: function (response) {
                        if (response.success) {
                            $(".notify-btn").attr("disabled", true); // Disable button after request
                            callSuccessToaster(response.message);
                        } else {
                            callErrorToaster(response.message);
                        }
                    },
                    error: function () {
                        callErrorToaster("Failed to request notification. Please try again.");
                    }
                });
            });
    
    </script>
}