@model DataAccessLayer.ViewModels.ItemViewModel;

<div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title fs-5 fw-bold text-secondary">@(Model.ItemId == 0 ? "Add " : "Update ") Item
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>
    <form id="SaveItemForm">
        <div class="modal-body ">

            <input type="hidden" asp-for="@Model.ItemId" />

            <div class="d-flex flex-sm-row flex-column gap-sm-3 gap-0">
                <div class="form-floating col mb-3">
                    <input type="text" class="form-control" id="ItemName" asp-for="@Model.ItemName"
                        placeholder="First Name*">
                    <label for="ItemName" class="text-black-50">Name*</label>
                    <span asp-validation-for="@Model.ItemName" class="text-danger text-size"></span>
                </div>
                <div class="form-floating col mb-3">
                    <input type="number" class="form-control" id="Price" asp-for="@Model.Price"
                        placeholder="Last Name*">
                    <label for="Price" class="text-black-50">Price*</label>
                    <span asp-validation-for="@Model.Price" class="text-danger text-size"></span>
                </div>
            </div>

            <div class="d-flex flex-sm-row flex-column gap-sm-3 gap-0">
                <div class="form-floating col mb-3">
                    <input type="text" class="form-control" id="Details" asp-for="@Model.Details" placeholder="Details">
                    <label for="Details" class="text-black-50">Details</label>
                    <span asp-validation-for="@Model.Details" class="text-danger text-size"></span>
                </div>
            </div>

            <div class="row">
                <div class="col-12 mb-3">
                    <div class="row mb-3 g-2" id="ThumbnailPreview"></div>
                    <label for="ThumbnailFile" class="form-control text-center cursorPointer">
                        <i class="fa-solid fa-cloud-arrow-up fs-5 text-black-50"></i>
                        <p class="ImageText mb-0 text-black-50">Thumbnail Image</p>
                    </label>
                    <input type="file" class="offscreen file" id="ThumbnailFile" name="ThumbnailImageFile"
                        asp-for="ThumbnailImageFile" accept="image/*" />
                    <span asp-validation-for="ThumbnailImageFile" class="text-danger text-size"></span>
                </div>
                <!-- Item Images Upload -->
                <div class="col-12">
                    <div class="row mb-3 g-2" id="ItemPreview"></div>
                    <label for="ItemImages" class="form-control text-center cursorPointer">
                        <i class="fa-solid fa-cloud-arrow-up fs-5 text-black-50"></i>
                        <p class="ImageText mb-0 text-black-50">Item Images</p>
                    </label>
                    <input type="file" class="offscreen file" name="AdditionalImagesFile" asp-for="AdditionalImagesFile"
                        id="ItemImages" multiple accept="image/*" />
                    <span asp-validation-for="AdditionalImagesFile" class="text-danger text-size"></span>
                </div>
            </div>

            <div class="modal-footer">
                <button type="submit" class="btn solid-btn">Save</button>
                <button type="button" class="btn hollow-btn" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </form>
</div>

<partial name="_ValidationScriptsPartial" />

<script>
    ExistingImages = [...@Html.Raw(Json.Serialize(Model.AdditionalImagesUrl ?? new List<string>()))];

    NewImages = [];

    function ShowImagePreview(src, onRemove) {
        const col = $(`
            <div class="col-auto d-flex justify-content-center">
                <div class="img-wrapper position-relative ">
                    <img src="${src}" class="img-thumbnail" style="max-height:100px;">
                    <span class="remove-image position-absolute top-0 end-0 btn btn-danger btn-sm" 
                         >&times;</span>
                </div>
            </div>
        `);
        col.find('.remove-image').click(function () {
            col.remove();
            onRemove();
        });
        return col;
    }

    function UpdateImagePreview() {
        $('#ItemPreview').empty();

        ExistingImages.forEach((url, i) => {
            const preview = ShowImagePreview(url, () => {
                ExistingImages.splice(i, 1);
                UpdateImagePreview(); // Re-render after splice
            });
            $('#ItemPreview').append(preview);
        });

        // Show Updated images
        NewImages.forEach((file, i) => {
            const reader = new FileReader();
            reader.onload = function (e) {
                const preview = ShowImagePreview(e.target.result, () => {
                    NewImages.splice(i, 1);
                    UpdateImagePreview(); // Re-render after splice
                });
                $('#ItemPreview').append(preview);
            };
            reader.readAsDataURL(file);
        });
    }


    $(document).ready(function () {

        // Handle File Selection for Thumbnail 
        const IsEditModal = @Model.ItemId != 0;
        const ThumbnailURL = '@Model.ThumbnailImageUrl';
        if (IsEditModal) {
            UpdateImagePreview();
            const preview = ShowImagePreview(ThumbnailURL, () => {
                $('#ThumbnailPreview').empty();
            });
            $('#ThumbnailPreview').append(preview);
        }

        // Allow only thumbnail image in Creating Modal not in editing

        if (!IsEditModal) {

            $("#ThumbnailFile").rules("add", {
                required: true,
                messages: {
                    required: "Thumbnail image is required."
                }
            });

            $("#ItemImages").rules("add", {
                required: true,
                messages: {
                    required: "At least one Item image is required."
                }
            });
        }

        $('#ThumbnailFile').change(function () {
            const file = this.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                $('#ThumbnailPreview').empty().append(ShowImagePreview(e.target.result, () => {
                    $('#ThumbnailFile').val('');
                    $('#ThumbnailPreview').empty();
                }));
            };
            reader.readAsDataURL(file);
        });


        // Handle product image selection
        $('#ItemImages').change(function () {
            const files = Array.from(this.files);
            files.forEach(file => {
                NewImages.push(file);
            });
            UpdateImagePreview();
        });


            // POST method of Save Tax
            $("#SaveItemForm").on("submit", function (e) {

                e.preventDefault();

                let form = $("#SaveItemForm");

                if (form.valid()) {

                    $('#ItemImages').removeAttr('name');

                    let formData = new FormData(this);

                    // Append existing retained image URL
                    ExistingImages.forEach(url => {
                        formData.append('AdditionalImagesURL', url);
                    });

                    NewImages.forEach(file => {
                        formData.append('AdditionalImagesFile', file);
                    });

                    $.ajax({
                        url: "/Admin/SaveItem",
                        type: "POST",
                        contentType: false,
                        processData: false,
                        data: formData,
                        success: function (data) {
                            if (data.success) {
                                callSuccessToaster(data.text);
                                Pagination(currentPage, searchText, pageSize, sortColumn, sortDirection);
                                $("#SaveItemModal").modal('hide');
                            } else {
                                callErrorToaster(data.text);
                            }
                        },
                        error: function () {
                            callErrorToaster("Error saving product.");
                        }
                    });
                }
            });
    });
</script>